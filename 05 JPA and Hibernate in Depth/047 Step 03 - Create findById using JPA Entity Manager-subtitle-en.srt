1
00:00:03,620 --> 00:00:09,210
Welcome back to the previous step redefined a course entity in this step.

2
00:00:09,230 --> 00:00:14,900
What we do is we create a repository so that I can manage the courses I can create courses delete causes

3
00:00:14,900 --> 00:00:16,420
and things like that.

4
00:00:16,460 --> 00:00:17,510
Let's quickly do that.

5
00:00:17,510 --> 00:00:25,190
So I want to create a new Jawa class I'd want to call this code repository but this would be managing

6
00:00:25,190 --> 00:00:25,840
the code.

7
00:00:25,850 --> 00:00:32,560
And today I would call it code repository and I would want to put it in a package or be more repository

8
00:00:33,060 --> 00:00:39,130
to all the repositories that would be creating you'll be creating it in the package repository.

9
00:00:39,140 --> 00:00:40,340
So let's go it.

10
00:00:40,490 --> 00:00:47,930
Finish this in any repository class what we would want to be able to do is to talk to the entity manager.

11
00:00:47,930 --> 00:00:51,470
So we would need to first have the entity manager auto add in.

12
00:00:51,470 --> 00:00:52,450
How do I do that.

13
00:00:52,570 --> 00:00:55,430
I a wide entity manager.

14
00:00:55,790 --> 00:01:00,550
And I just called this manager or you can just call him.

15
00:01:00,740 --> 00:01:05,610
So this is kind of the convention which we use you can either call it entity manager or just him.

16
00:01:05,690 --> 00:01:09,120
If you look at all the examples traditionally they would be using it.

17
00:01:09,140 --> 00:01:11,380
So let let's use that as well in this code.

18
00:01:11,510 --> 00:01:19,260
So now I've done a complete shift or organized import and you see that the manager is imported in and

19
00:01:19,290 --> 00:01:20,980
or the site is also in.

20
00:01:21,050 --> 00:01:21,530
That's good.

21
00:01:21,530 --> 00:01:23,740
So we now have the entity manager.

22
00:01:23,760 --> 00:01:27,350
There are three methods that we would want to create in the course deposit.

23
00:01:27,650 --> 00:01:34,900
One is find by ID we want to pass in an ID and get the course for that specific ID.

24
00:01:34,970 --> 00:01:41,120
So I would want be able to pass in an ID one and get the call saying J.P. 806 I would want to be able

25
00:01:41,120 --> 00:01:42,760
to save accounts.

26
00:01:42,890 --> 00:01:48,860
So this statement that I would want to be able to use to insert the codes as well as I would want to

27
00:01:48,860 --> 00:01:51,320
be able to abate of course.

28
00:01:51,410 --> 00:01:56,700
So whether I would want to insert a new code or I would want to update an existing code.

29
00:01:56,720 --> 00:02:02,600
I would want to use the same method delete by id method I would want to be able to pass in an ID and

30
00:02:02,600 --> 00:02:03,830
delete it.

31
00:02:03,950 --> 00:02:10,610
So these are the three methods that we would want to create in the next few steps for no what I would

32
00:02:10,610 --> 00:02:14,180
want to focus on is defined by it.

33
00:02:14,390 --> 00:02:18,790
So let's create this public court find by ID.

34
00:02:19,040 --> 00:02:22,220
I would want to return the because for that specific.

35
00:02:22,490 --> 00:02:28,250
What is the method in and the manager can make use of the manager that if you look at the entity manager

36
00:02:28,370 --> 00:02:30,090
there is a fine demand code.

37
00:02:30,380 --> 00:02:35,990
We will look at all the other method to chaplets and in the entity manager a little later in a basic

38
00:02:35,990 --> 00:02:37,710
discussion on into the manager.

39
00:02:37,730 --> 00:02:41,670
For now lets use the find method which is present in the entity manager.

40
00:02:41,830 --> 00:02:49,070
I would say into the manager that fine what is the class of the end of the its course not as I would

41
00:02:49,070 --> 00:02:55,270
want to find a course whose primary key is this.

42
00:02:55,480 --> 00:02:58,650
And I would want to return that back.

43
00:02:59,020 --> 00:03:02,620
What we are doing is defining a simple Find method.

44
00:03:02,650 --> 00:03:07,290
We have done this earlier as well when we were taking the intellection BJP.

45
00:03:07,330 --> 00:03:13,080
Now what we'll do is we'll try and use discours repository when we launch the application.

46
00:03:13,080 --> 00:03:15,180
So we have defined method defined.

47
00:03:15,280 --> 00:03:20,290
Now I would want to use this find by ID to get a detail of a code how do I do that.

48
00:03:20,290 --> 00:03:26,380
I can go to the day of my application and the application what I'll do is make it implement something

49
00:03:26,380 --> 00:03:28,380
called a command line run.

50
00:03:28,510 --> 00:03:33,920
So I put the command line in and I would need to implement a couple of methods of control one or common

51
00:03:33,940 --> 00:03:36,580
one and add and implement it and a third or what.

52
00:03:36,600 --> 00:03:42,490
Here I would want to make use of the cost repository using spring right the way we would do that in

53
00:03:42,490 --> 00:03:44,620
spring is we would auto wire it in.

54
00:03:44,630 --> 00:03:53,070
So in my application or I will do is at Wired or most important that everything is ultimately Polder.

55
00:03:53,260 --> 00:04:02,270
And now I can make use that the repository Dorte find by ID can I find by the way how many did I find

56
00:04:02,270 --> 00:04:02,910
right now.

57
00:04:03,030 --> 00:04:06,110
No we don't really have any data defined right now.

58
00:04:06,290 --> 00:04:11,900
So what I'll do is I'll create a course within the depth of them and do remember how we created the

59
00:04:11,900 --> 00:04:12,470
data.

60
00:04:12,470 --> 00:04:17,850
The initial steps of the JP stuff what we need to do is we need to create a new file.

61
00:04:18,110 --> 00:04:21,690
So what I'll do is I'll create a new file called Data Rescue.

62
00:04:21,700 --> 00:04:23,630
It is in us kill file.

63
00:04:24,020 --> 00:04:25,120
I'll call this date or not.

64
00:04:25,140 --> 00:04:33,610
See we'll finish and all here I'll say insert into course for now there's only two fields ID.

65
00:04:33,620 --> 00:04:46,230
Come on name and I would say use ten thousand one comma it's say JP in fifty's bartending.

66
00:04:46,300 --> 00:04:48,000
Use a single code not double code.

67
00:04:48,050 --> 00:04:49,440
So this should be a single code.

68
00:04:49,460 --> 00:04:52,510
The other one is that you should end with a semicolon.

69
00:04:52,730 --> 00:04:56,630
I've made a typo in here so it should be inserted into code.

70
00:04:56,630 --> 00:04:59,030
Come on him use what this would do.

71
00:04:59,030 --> 00:05:01,640
This would insert a code into the table.

72
00:05:01,820 --> 00:05:08,670
And what the application does is when the demo application launches up because the implementer come

73
00:05:08,680 --> 00:05:11,710
in and render this run that would launch.

74
00:05:11,840 --> 00:05:15,610
And this would get the code at the ID 10000 one.

75
00:05:15,710 --> 00:05:18,460
Let's send this to a new field.

76
00:05:18,790 --> 00:05:21,210
Not new field I would want to use.

77
00:05:21,590 --> 00:05:23,430
You look at your bill.

78
00:05:23,500 --> 00:05:25,920
I would want to call this code over here.

79
00:05:25,940 --> 00:05:31,540
I would want to use a logger the way I can get it all get created is a very simple way to private log

80
00:05:31,550 --> 00:05:35,730
will use SLA for lager lager lager.

81
00:05:35,830 --> 00:05:46,050
It's the to of the factory or get longer for this specific class or import import lager.

82
00:05:46,070 --> 00:05:51,360
I would want to use Othella Fujii in that so we have the Laga present now.

83
00:05:51,380 --> 00:05:53,370
So I would use the lager dog.

84
00:05:53,450 --> 00:05:57,800
This dog and talk log.

85
00:05:58,070 --> 00:06:00,510
It's augured info.

86
00:06:00,560 --> 00:06:04,610
You can log the details of the course come up.

87
00:06:04,810 --> 00:06:10,210
So it would have been called Details called ten thousand one needs.

88
00:06:10,240 --> 00:06:14,720
This I can launch this application now to check that everything's working fine.

89
00:06:14,750 --> 00:06:18,260
When I launched the application up I get an error.

90
00:06:18,350 --> 00:06:23,990
It says application failed the stack because field repository requests a bean of this type that could

91
00:06:23,990 --> 00:06:24,570
not be found.

92
00:06:24,720 --> 00:06:26,580
A been not found error.

93
00:06:26,900 --> 00:06:31,400
What would you do when you get a B not found error in spring.

94
00:06:31,400 --> 00:06:35,210
You need to check which been to of course deposit Rubinius not fun.

95
00:06:35,270 --> 00:06:36,320
Why is this not fun.

96
00:06:36,320 --> 00:06:38,070
Think about it this is putting.

97
00:06:38,210 --> 00:06:42,100
And actually I missed the annotation repository.

98
00:06:42,200 --> 00:06:46,190
So let's import that in depositary annotation.

99
00:06:46,430 --> 00:06:48,660
And now let's launch it again.

100
00:06:49,010 --> 00:06:53,440
If you're not really an expert at pring I would really recommend you to look at the appendix.

101
00:06:53,500 --> 00:06:59,210
There's a indirection displaying which would really help you to understand spring and all these concepts

102
00:06:59,300 --> 00:07:00,100
for the wedding.

103
00:07:00,100 --> 00:07:03,880
Now let's continue with what we are doing with the specific entity.

104
00:07:04,000 --> 00:07:10,880
Now you would see that there is a code in 2001 that printed here and it's printing the court or here

105
00:07:11,080 --> 00:07:14,820
in this I would want to actually print the details of the code.

106
00:07:14,840 --> 00:07:16,070
How do we do that.

107
00:07:16,070 --> 00:07:17,090
Think about that too.

108
00:07:17,180 --> 00:07:24,140
I would want to preprinted details of the code I would create to string at the right mix or generate

109
00:07:24,310 --> 00:07:29,340
generate two string rightly generated to string.

110
00:07:29,360 --> 00:07:35,390
I don't need the idea I just need the name to just say name and remove everything.

111
00:07:35,540 --> 00:07:38,520
I just customize this so that this is very concise.

112
00:07:38,540 --> 00:07:41,320
Of course with the name is printed.

113
00:07:41,530 --> 00:07:42,680
Let's stop the application.

114
00:07:42,680 --> 00:07:43,490
Run it again.

115
00:07:43,520 --> 00:07:44,170
Cool.

116
00:07:44,250 --> 00:07:50,600
Now think 10000 one is called G.P.A. in strip so it's getting the data from the database and printing

117
00:07:50,600 --> 00:07:51,560
it.

118
00:07:52,330 --> 00:07:54,090
Ok that's cool.

119
00:07:54,260 --> 00:07:59,150
That's a lot of things that we have and we have created an entity we have created a repository we have

120
00:07:59,150 --> 00:08:01,170
created a command line run.

121
00:08:01,410 --> 00:08:04,370
There's a lot of things that are happening in the background.

122
00:08:04,520 --> 00:08:11,600
What we'll do is for the next couple of steps we'll take a pause and revise what we have done and you

123
00:08:11,600 --> 00:08:16,070
know we would look at what is happening in the background we'll turn a few switches on so that you would

124
00:08:16,070 --> 00:08:17,160
get more log.

125
00:08:17,480 --> 00:08:20,760
And we have more visibility into what's happening in the background.

126
00:08:21,050 --> 00:08:22,140
Until then I.


1
00:00:04,530 --> 00:00:10,080
Step we revised our understanding of what's happening in the background in the step we would want to

2
00:00:10,080 --> 00:00:12,930
write a simple unit test.

3
00:00:13,050 --> 00:00:19,620
So we defined a simple method to be able to find a course in the course repository.

4
00:00:19,680 --> 00:00:21,170
It's just a very simple method.

5
00:00:21,230 --> 00:00:26,190
What we would want to be able to write a unit test to this and check whether it's working fine.

6
00:00:26,190 --> 00:00:29,030
So that's what we should be focusing on in this step.

7
00:00:29,040 --> 00:00:33,750
One of the things which we miss to doing in the previous step was to look at the histo controlling the

8
00:00:33,750 --> 00:00:34,910
application of that property.

9
00:00:35,040 --> 00:00:41,460
We've done statistics on really good then we don't queries on them being able to control on what we

10
00:00:41,460 --> 00:00:42,570
didn't look at it yet.

11
00:00:42,600 --> 00:00:49,260
So let's get to the hitch do control enough go to the browser and type in localhost ADHD flash hits

12
00:00:49,280 --> 00:00:54,980
to control to this that you are a local host ADHD slashes to control going there.

13
00:00:55,170 --> 00:00:58,580
You can see the values which you'd need to populate on your screen right.

14
00:00:58,590 --> 00:00:59,010
No.

15
00:00:59,130 --> 00:01:03,130
So your driver classes are headed to right where you are to busy you are.

16
00:01:03,160 --> 00:01:07,410
Here's the one thing which you need to know in detail should be JTB Seacole unhitched do.

17
00:01:07,440 --> 00:01:14,030
Colin mehm coal industry the user name and password is empty and you can take it once you do connect.

18
00:01:14,070 --> 00:01:17,850
You'll be able to see the core stable which is present in here.

19
00:01:17,850 --> 00:01:19,770
This is what the school has to control.

20
00:01:19,890 --> 00:01:25,710
Once you select a table and run you can see the data which is present in for another to very simple

21
00:01:25,710 --> 00:01:31,280
table like we have an ID name but this console would be using it extensively through the scores.

22
00:01:31,280 --> 00:01:35,370
This is not just select queries if you want the insert date or the date and things like that.

23
00:01:35,400 --> 00:01:37,550
You can do that from here as well.

24
00:01:37,710 --> 00:01:43,170
So this is very similar to your database Klein fields article for example.

25
00:01:43,170 --> 00:01:45,800
You may be using something like a skill developer or taught.

26
00:01:45,840 --> 00:01:49,770
This is exactly the same except for the fact that this is on line.

27
00:01:49,770 --> 00:01:52,060
This is a web browser kind of thing.

28
00:01:52,080 --> 00:01:56,970
This is available as long as your application is available as long as your application is running.

29
00:01:57,000 --> 00:02:02,040
You have all the tables and the database available for you when the application goes down the hatch

30
00:02:02,040 --> 00:02:04,530
to cancel also goes down along.

31
00:02:04,650 --> 00:02:09,930
Now let's shift our attention to what we want to do in this step which is to create a unique test for

32
00:02:09,930 --> 00:02:12,210
our cause repository.

33
00:02:12,960 --> 00:02:18,990
What we'll do is we'll create a class called depositary death and in all this find by ID and see if

34
00:02:18,990 --> 00:02:24,350
the code which is returned back has the name that we wanted.

35
00:02:24,390 --> 00:02:28,890
The most important thing that you need to understand is the fact that your desk board should be separate

36
00:02:29,370 --> 00:02:31,350
from your source code.

37
00:02:31,440 --> 00:02:32,860
So this is your production code.

38
00:02:32,920 --> 00:02:34,660
So its main job is your production code.

39
00:02:34,660 --> 00:02:37,710
Its main job at the source is your production configuration.

40
00:02:37,920 --> 00:02:41,680
The source inside source says Java will not be part of the operation.

41
00:02:41,870 --> 00:02:44,970
But this is more to test your code.

42
00:02:44,990 --> 00:02:46,380
Either way create a unit test.

43
00:02:46,380 --> 00:02:47,210
What I lose.

44
00:02:47,280 --> 00:02:53,550
I'll start with copying them supplications just so I copy them all applications test and paste it out

45
00:02:54,090 --> 00:02:58,670
and I renamed this s cause the pause.

46
00:02:59,210 --> 00:03:03,620
The first thing I would do is to change the package name to back his name.

47
00:03:03,690 --> 00:03:06,600
We should match the package name of the class that is being tested.

48
00:03:06,600 --> 00:03:13,290
We want the best course repositories because repositories in the package Dawk repository Soldat repository.

49
00:03:13,290 --> 00:03:14,160
That is the package we had.

50
00:03:14,160 --> 00:03:19,090
I would want to put this control one command one move now be inside that packet.

51
00:03:19,090 --> 00:03:20,480
Of course depositary test.

52
00:03:20,670 --> 00:03:23,570
That's cool if you see this specific test.

53
00:03:23,580 --> 00:03:29,850
The most important thing they do in addition to the OP I'd want to launch a spring context in my unit

54
00:03:29,880 --> 00:03:37,300
test in these kind of situations we use something called at a with spring mode or class.

55
00:03:37,500 --> 00:03:42,930
So I can mid-spring another class is used to write luncher spring Quantic the spring contex that we

56
00:03:42,930 --> 00:03:43,990
would want to launch.

57
00:03:44,010 --> 00:03:51,240
Is this bringing boot test so we would want to launch the entire spring boot context which is present

58
00:03:51,240 --> 00:03:52,120
in here.

59
00:03:52,140 --> 00:03:58,010
We would want to launch the entire more application Quon text which you have in here so that at Spring

60
00:03:58,060 --> 00:04:04,740
boot best over here I can even explicitly specify the springboard context file that I would want to

61
00:04:04,740 --> 00:04:05,130
launch.

62
00:04:05,130 --> 00:04:10,680
I can take classes is equal to the more application class.

63
00:04:10,890 --> 00:04:14,210
What I would want to launch is this demo application that.

64
00:04:14,250 --> 00:04:16,980
This is the one which contains springboard application.

65
00:04:16,980 --> 00:04:23,490
This is the context that I would want to launch and I'm spacefaring databasing flatus is equal to the

66
00:04:23,670 --> 00:04:24,830
application that.

67
00:04:24,870 --> 00:04:29,040
What this would do is it would launch up the entire.

68
00:04:29,070 --> 00:04:35,900
So if I do a right click Puranas do this it would launch the entire context.

69
00:04:35,940 --> 00:04:42,840
And because this unit test immediately within the context as well what would happen is first it is launching

70
00:04:42,840 --> 00:04:45,970
the springboard context Plunger's this being good context.

71
00:04:45,990 --> 00:04:49,780
We have seen what are the things that would happen at the launch of the context right.

72
00:04:49,800 --> 00:04:55,200
The first thing is we hibernate created the table for us because it's enabled by supplying good configuration

73
00:04:55,620 --> 00:04:59,760
then it would run the sequel files that would create the data that we would need.

74
00:04:59,790 --> 00:05:05,320
It would fire the query also like the application class also has either.

75
00:05:05,560 --> 00:05:11,270
So if you look at the application class this also runs the query which is pleasant to me.

76
00:05:11,290 --> 00:05:15,460
So it runs the query and then what it would do it's a good run.

77
00:05:15,600 --> 00:05:21,580
Whatever code that we write in just in the example we don't have any code in the test so you can see

78
00:05:21,580 --> 00:05:24,350
that totally positive test is being done here.

79
00:05:24,490 --> 00:05:30,010
We don't really have anything in the test right now so nothing will happen because of the test and then

80
00:05:30,220 --> 00:05:34,310
the table would be dropped and the whole context would be killed.

81
00:05:34,320 --> 00:05:38,600
So what would happen when I launched it just as the context has launched and the context is good.

82
00:05:38,620 --> 00:05:46,170
For example let's say I would want to log something in here I go to the application and copy the logger

83
00:05:46,180 --> 00:05:49,640
stuff so that I will be able to log things in here.

84
00:05:49,870 --> 00:05:55,240
I copied the log or I would do is log the dot info.

85
00:05:55,400 --> 00:06:00,310
I'll say d'Este is running contex lot.

86
00:06:00,310 --> 00:06:02,570
Run the unit just like you Cronin's Jane.

87
00:06:02,650 --> 00:06:04,960
Or you can select it from here.

88
00:06:05,010 --> 00:06:08,060
You would see that the whole thing happens again.

89
00:06:08,200 --> 00:06:14,580
The table created data is populated the queries run and as soon as the queries run the context is launched

90
00:06:14,950 --> 00:06:18,600
then what would happen is your desk gets fired.

91
00:06:18,610 --> 00:06:19,660
You can see here.

92
00:06:19,780 --> 00:06:21,410
Testing isn't running.

93
00:06:21,460 --> 00:06:22,330
Testing is running.

94
00:06:22,390 --> 00:06:23,690
What do I mean.

95
00:06:23,740 --> 00:06:27,270
I actually wanted to pipe into this morning that it does not really matter.

96
00:06:27,280 --> 00:06:32,060
You can see that the what is in there is being printed in here.

97
00:06:32,200 --> 00:06:36,330
And once the test runs it would actually drop the entire schema.

98
00:06:36,340 --> 00:06:38,610
The sequence of events is very simple.

99
00:06:38,630 --> 00:06:39,930
Context gets launched.

100
00:06:40,000 --> 00:06:42,780
The restaurant and the context get killed.

101
00:06:42,970 --> 00:06:47,190
What do we want to do here is we would want a desk because we pause it really.

102
00:06:47,250 --> 00:06:53,670
So what we want the best is of course we pause the dirty and report it.

103
00:06:53,920 --> 00:07:01,990
Let's create an instance for it in here and said this is going to be auto wired and the top is import

104
00:07:02,000 --> 00:07:03,680
control shift or command shift to.

105
00:07:03,860 --> 00:07:10,480
And now in the test I can call whatever I would want to call a positive 3.5 and by a D.

106
00:07:10,990 --> 00:07:16,540
And I would want to pass in the ID of ten thousand one and I would get the court back same statement

107
00:07:16,550 --> 00:07:19,170
to your local court is it could.

108
00:07:19,330 --> 00:07:19,940
That's cool.

109
00:07:19,950 --> 00:07:25,620
Right now I can write an essay on the code so I can say is it equals.

110
00:07:25,750 --> 00:07:27,540
What's the name of the course.

111
00:07:27,640 --> 00:07:30,360
Course not good.

112
00:07:30,470 --> 00:07:33,160
What should be the name of because we don't get it from.

113
00:07:33,210 --> 00:07:38,270
I can go to that are equal whatever name you have put it in here should be the name we should come back

114
00:07:38,710 --> 00:07:40,760
to that EPS.

115
00:07:41,230 --> 00:07:49,960
Let's get here and put it in and I'll look and one command one and add a static import for that as well.

116
00:07:50,170 --> 00:07:57,360
So now you see that I'm asserting things with that that equals the left side is the expected value and

117
00:07:57,390 --> 00:07:58,360
is the action.

118
00:07:58,590 --> 00:08:04,780
And make sure that this is added to when you added to the unit messages which come up with much much

119
00:08:04,780 --> 00:08:06,120
more helpful.

120
00:08:06,180 --> 00:08:11,930
There's no longer testing a context Lord is just testing testing to find him.

121
00:08:12,040 --> 00:08:19,220
So I call this find be a very basic test is to say that this is the most basic This is defined by the

122
00:08:19,240 --> 00:08:20,050
method.

123
00:08:20,530 --> 00:08:25,300
And now I can do it I click around as to just table it's created.

124
00:08:25,300 --> 00:08:26,430
What does it test do.

125
00:08:26,430 --> 00:08:30,890
The test also fired the test fired the query again.

126
00:08:30,950 --> 00:08:35,980
You can see that because the positive test is in here because depositary test fired the query because

127
00:08:35,980 --> 00:08:42,850
we are calling the repository method defined by ID or the ID that is being passed 10000 to one you can

128
00:08:42,850 --> 00:08:47,440
see that the session metrics are being printed and the entire thing comes out.

129
00:08:47,440 --> 00:08:50,030
I would recommend you to play around with this unit.

130
00:08:50,080 --> 00:08:53,030
So you can change this to GAAP in 50 steps.

131
00:08:53,030 --> 00:08:57,980
Let's say I would want to change it and say Gippi 800 steps what would happen.

132
00:08:58,220 --> 00:08:58,660
Brantly.

133
00:08:58,670 --> 00:09:04,300
And with this test would fail obviously because the name that comes from your database is Jaypee in

134
00:09:04,300 --> 00:09:04,980
50 states.

135
00:09:04,990 --> 00:09:07,790
What I'm saying I'm expecting to be in 100 steps.

136
00:09:08,170 --> 00:09:10,550
So you would see that the test would fail.

137
00:09:11,060 --> 00:09:14,790
You'd see that it says OK Janet companies and failure.

138
00:09:14,800 --> 00:09:19,020
I'm expecting JP hundred dips but it was GP in 50 steps.

139
00:09:19,130 --> 00:09:21,990
Janet it's also very helpful in saying what's the difference.

140
00:09:22,030 --> 00:09:28,150
Inside the inside the brackets easten and fighting this dent here it's 1 0 here it's five.

141
00:09:28,150 --> 00:09:29,380
That's the difference.

142
00:09:29,650 --> 00:09:33,010
So this is where Juna just really helpful.

143
00:09:33,010 --> 00:09:37,070
It would be able to automate can you find out any flaws in your code.

144
00:09:37,110 --> 00:09:41,140
So if this find babies getting it wrong ID back out the wrong code.

145
00:09:41,140 --> 00:09:46,780
Back then we would be able to easily find it out because these gene it would be running in continuous

146
00:09:46,780 --> 00:09:47,470
integration.

147
00:09:47,470 --> 00:09:52,360
This would be running as part of your bill so if and whenever there's a bug in your code this would

148
00:09:52,420 --> 00:09:53,930
easily find it out.

149
00:09:54,040 --> 00:09:55,130
Let's fix this.

150
00:09:55,130 --> 00:09:57,290
Let's go back to G.P.A. in 50 steps.

151
00:09:57,340 --> 00:10:00,330
If you run this you'll see that the test would succeed.

152
00:10:00,460 --> 00:10:04,940
If this is the first time your writings uniters there are a lot of things that you might be learning

153
00:10:04,940 --> 00:10:06,060
for the first time.

154
00:10:06,200 --> 00:10:12,060
What I would recommend you to do is to try and play around with this unit test again and again try and

155
00:10:12,060 --> 00:10:18,680
write a simple unit test a couple of more tests around the scenario maybe populate some data in here

156
00:10:18,680 --> 00:10:24,020
so you can populate a new quote in here and try and play around with it and see what would happen.

157
00:10:24,020 --> 00:10:31,070
One of the things that we really believe in 28 and it is the best time to learn is when you have something

158
00:10:31,070 --> 00:10:33,200
working so you have a unit test working.

159
00:10:33,200 --> 00:10:39,670
You have depositary you have an entity now you can play around with it take a back up try and play it

160
00:10:39,680 --> 00:10:40,790
and break it.

161
00:10:40,880 --> 00:10:43,720
And that's the best way to learn until the next step.

162
00:10:43,730 --> 00:10:44,020
Baba.


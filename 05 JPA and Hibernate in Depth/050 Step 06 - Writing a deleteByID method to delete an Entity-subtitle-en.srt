1
00:00:02,720 --> 00:00:10,160
Welcome back in step what we'll do is we'll try a simple method to delete the course the method which

2
00:00:10,160 --> 00:00:13,530
we don't write is probably quite deliberately long.

3
00:00:13,700 --> 00:00:15,530
So that's the one which we would want to write.

4
00:00:15,530 --> 00:00:19,510
How do we delete the course again into the manager comes to your rescue.

5
00:00:19,520 --> 00:00:23,770
The easiest way to delete a course is by saying to the manager.

6
00:00:23,990 --> 00:00:31,610
Rimu You're in THE However I would want to first be able to get the entity for this idea what I can

7
00:00:31,610 --> 00:00:33,940
do is I can call defined by it.

8
00:00:34,220 --> 00:00:41,240
So first I would get the entity mapped by that specific thing to go to court as a call to find Beatty

9
00:00:41,670 --> 00:00:43,400
you got removed.

10
00:00:43,490 --> 00:00:47,330
That's basically your code right to that top you will delete.

11
00:00:47,330 --> 00:00:50,030
Of course I've not written it back.

12
00:00:50,030 --> 00:00:50,760
We'll deal with it.

13
00:00:50,790 --> 00:00:51,140
Right.

14
00:00:51,160 --> 00:00:59,540
So it's E-M who got all that I need to do is get the code and see into the manager but what we'll do

15
00:00:59,910 --> 00:01:03,830
is we'll try and delete this course at this startup.

16
00:01:03,830 --> 00:01:10,800
So the more application what I'll do here is over here as soon as I print the quote I like to train.

17
00:01:10,890 --> 00:01:17,810
So it depositary don't delete by 80 percent.

18
00:01:18,020 --> 00:01:21,750
So what we're doing is application start up we we're deleting 10000 one.

19
00:01:21,920 --> 00:01:25,750
And also what I'll do is add a little bit more data.

20
00:01:25,760 --> 00:01:31,340
So in the data scale right now I just have one row let's add a few more rows so that I can see the other

21
00:01:31,340 --> 00:01:33,280
one 1000 2003.

22
00:01:33,360 --> 00:01:39,340
So that says Bring in 50 stript spring board in it.

23
00:01:39,530 --> 00:01:44,170
You can have them make it a service call which or one you would like allow or make this.

24
00:01:44,200 --> 00:01:50,530
Now I would want to actually launch the application I'm launching this one right click on my application.

25
00:01:50,530 --> 00:01:53,410
Right click on your application.

26
00:01:53,480 --> 00:01:57,680
One of the things you should be cautious from now on is because we would be writing unit tests and also

27
00:01:57,680 --> 00:01:59,220
run the application in parallel.

28
00:01:59,280 --> 00:02:01,560
You should be careful about what you are running.

29
00:02:01,580 --> 00:02:04,830
So if you go in here you can see actually that these are the death.

30
00:02:05,000 --> 00:02:11,090
So if you want to run the best then you can do this if I want to run the application itself to my application.

31
00:02:11,240 --> 00:02:15,110
I would want to run the applications I am running the application of we would start by looking at the

32
00:02:15,110 --> 00:02:19,240
log and then we would look at the console.

33
00:02:19,670 --> 00:02:23,220
You can see that I'm getting exception saying no.

34
00:02:23,240 --> 00:02:29,510
And the manager with actual transaction every liberal you are trying to manipulate data you're trying

35
00:02:29,510 --> 00:02:30,110
to be more.

36
00:02:30,140 --> 00:02:38,840
Of course what you are trying to remove it in a method which does not have any transaction around it.

37
00:02:38,960 --> 00:02:40,540
What is this transaction.

38
00:02:40,760 --> 00:02:42,430
Why do we need a transaction.

39
00:02:42,710 --> 00:02:43,800
Don't worry about it.

40
00:02:43,880 --> 00:02:46,330
We'll talk about transactions a lot more.

41
00:02:46,450 --> 00:02:52,900
All that you need to know is the fact that splitting makes transaction management very very easy.

42
00:02:52,910 --> 00:02:56,520
So the problem is that the deliberate ID is trying to branded.

43
00:02:56,540 --> 00:03:00,900
Of course it's bank to make a change in the code details.

44
00:03:01,010 --> 00:03:05,360
If you look at defined by ID it is just getting the details of the court so it does not have a problem

45
00:03:05,690 --> 00:03:10,940
but the deliberate ID method what it's doing it's actually trying to remove a quarter trying to delete

46
00:03:10,950 --> 00:03:13,460
because it's trying to make a change in data.

47
00:03:13,760 --> 00:03:21,170
If you are trying to make a change in data you should do it within something called a transaction.

48
00:03:21,170 --> 00:03:23,140
For example there are a sequence of steps.

49
00:03:23,140 --> 00:03:23,380
Right.

50
00:03:23,380 --> 00:03:28,990
So if I'm transferring some amount from my account to my friend's account there may be two steps right

51
00:03:29,000 --> 00:03:33,870
first deduct the balance from my account and transfer the balance into my friend's account.

52
00:03:34,070 --> 00:03:37,000
I want to make sure that both of these are successful.

53
00:03:37,010 --> 00:03:41,590
The second step fails then I would want the first step to be the worst.

54
00:03:41,600 --> 00:03:46,520
I don't want to be in a situation where a hundred rupees is removed from my account but it's not credited

55
00:03:46,520 --> 00:03:48,590
to my friend's account.

56
00:03:48,590 --> 00:03:53,450
I don't want to be shot by a hundred rupees or dollars or euros which I will guarantee you will do want

57
00:03:53,450 --> 00:03:56,880
to use that for transaction management enabled us.

58
00:03:56,990 --> 00:03:59,390
We have a DVD section on transaction management.

59
00:03:59,390 --> 00:04:05,310
A little later spring really makes it easy to manage transactions all that you need to do with that

60
00:04:05,620 --> 00:04:07,120
transaction.

61
00:04:07,310 --> 00:04:10,830
I'm importing our spring from book transactional in here.

62
00:04:10,970 --> 00:04:15,230
Later we will talk about the difference between GPL and displaying transactions as well.

63
00:04:15,230 --> 00:04:19,740
For now I'm adding a transaction on the cost repository.

64
00:04:19,760 --> 00:04:25,060
This would ensure that any change that is done in the method that is present in the course depositary

65
00:04:25,070 --> 00:04:30,210
any public method this would act as the start and the end of the transaction.

66
00:04:30,530 --> 00:04:34,020
And that I think would be running in a single transaction.

67
00:04:34,250 --> 00:04:39,610
So if anything fails everything that is changed as part of this method will be rolled back.

68
00:04:39,710 --> 00:04:41,550
Never on this application.

69
00:04:41,660 --> 00:04:43,570
The application started up fine right now.

70
00:04:43,580 --> 00:04:46,570
So let's see what queery was the last one fine.

71
00:04:46,610 --> 00:04:51,250
You can see that the delete query was fact delete from courseware IDs equal to what is the ID that was

72
00:04:51,250 --> 00:04:58,790
sent dentals and 1 and it says that there were specific amount of time was spent executing that statement.

73
00:04:58,790 --> 00:05:00,080
That's all right.

74
00:05:00,080 --> 00:05:07,210
So first what it does it raises set the course and then we are trying to do that to Courtrai to find

75
00:05:07,210 --> 00:05:07,900
by.

76
00:05:07,990 --> 00:05:12,640
This is your de-select And then this executes the delete.

77
00:05:12,700 --> 00:05:13,710
Let's see the data.

78
00:05:13,740 --> 00:05:17,030
It's a fresher browser has can truly connect again.

79
00:05:17,380 --> 00:05:19,990
Let's go to the code run.

80
00:05:20,050 --> 00:05:26,270
You can see that ten thousand one is no longer there because that delete it in the step until now.

81
00:05:26,290 --> 00:05:33,040
What we have done is very simple method be executed that from our application next what we would want

82
00:05:33,040 --> 00:05:36,820
to do is we would want to write a unit test for that in the next step.

83
00:05:36,820 --> 00:05:38,660
Let's work on that until then.

84
00:05:38,680 --> 00:05:38,850
But.

